1. Components
Components are the building blocks of a React application. They can be functional or class-based.

Example: Functional Component

jsx
Copy code
import React from 'react';

function Greeting() {
  return <h1>Hello, World!</h1>;
}

export default Greeting;
2. JSX
JSX allows you to write HTML-like syntax in JavaScript.

Example: JSX Syntax

jsx
Copy code
const element = <h1>Welcome to React!</h1>;
3. Props
Props (short for properties) are used to pass data from one component to another.

Example: Passing Props

jsx
Copy code
function Welcome(props) {
  return <h1>Hello, {props.name}!</h1>;
}

function App() {
  return <Welcome name="John" />;
}
4. State
State is used to manage data that changes over time within a component.

Example: Using State

jsx
Copy code
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

export default Counter;
5. Lifecycle Methods
Lifecycle methods (in class components) or hooks (in functional components) control what happens at different stages of a componentâ€™s life.

Example: useEffect Hook

jsx
Copy code
import React, { useState, useEffect } from 'react';

function Timer() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCount((prevCount) => prevCount + 1);
    }, 1000);

    return () => clearInterval(interval); // Cleanup
  }, []);

  return <p>Timer: {count}s</p>;
}

export default Timer;
6. Event Handling
React handles events like clicks, key presses, etc., in a declarative manner.

Example: Handling Events

jsx
Copy code
function ClickHandler() {
  const handleClick = () => {
    alert('Button Clicked!');
  };

  return <button onClick={handleClick}>Click Me</button>;
}

export default ClickHandler;
7. Conditional Rendering
Render components or elements conditionally.

Example: Conditional Rendering

jsx
Copy code
function UserGreeting(props) {
  return <h1>Welcome back!</h1>;
}

function GuestGreeting(props) {
  return <h1>Please sign up.</h1>;
}

function Greeting(props) {
  if (props.isLoggedIn) {
    return <UserGreeting />;
  }
  return <GuestGreeting />;
}
8. Lists and Keys
Render lists of elements using the map() function and provide a unique key for each item.

Example: Rendering a List

jsx
Copy code
function NameList() {
  const names = ['Alice', 'Bob', 'Charlie'];
  return (
    <ul>
      {names.map((name, index) => (
        <li key={index}>{name}</li>
      ))}
    </ul>
  );
}

export default NameList;
9. Forms and Controlled Components
Controlled components are those where React manages form data.

Example: Controlled Component

jsx
Copy code
import React, { useState } from 'react';

function Form() {
  const [value, setValue] = useState('');

  const handleChange = (event) => {
    setValue(event.target.value);
  };

  const handleSubmit = (event) => {
    alert('A name was submitted: ' + value);
    event.preventDefault();
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Name:
        <input type="text" value={value} onChange={handleChange} />
      </label>
      <button type="submit">Submit</button>
    </form>
  );
}

export default Form;
10. Context API
Used for managing global state without prop drilling.

Example: Context API

jsx
Copy code
import React, { createContext, useContext } from 'react';

const UserContext = createContext();

function ComponentA() {
  const user = useContext(UserContext);
  return <h1>Hello, {user}!</h1>;
}

function App() {
  return (
    <UserContext.Provider value="John Doe">
      <ComponentA />
    </UserContext.Provider>
  );
}

export default App;
11. React Router
React Router is used for navigation in React apps.

Example: React Router

jsx
Copy code
import React from 'react';
import { BrowserRouter as Router, Route, Link } from 'react-router-dom';

function Home() {
  return <h2>Home</h2>;
}

function About() {
  return <h2>About</h2>;
}

function App() {
  return (
    <Router>
      <nav>
        <Link to="/">Home</Link>
        <Link to="/about">About</Link>
      </nav>
      <Route path="/" exact component={Home} />
      <Route path="/about" component={About} />
    </Router>
  );
}

export default App;
12. Fetching Data with fetch or Axios
Fetch data from APIs.

Example: Fetch API

jsx
Copy code
import React, { useState, useEffect } from 'react';

function DataFetching() {
  const [data, setData] = useState([]);

  useEffect(() => {
    fetch('https://jsonplaceholder.typicode.com/posts')
      .then((response) => response.json())
      .then((data) => setData(data));
  }, []);

  return (
    <ul>
      {data.map((item) => (
        <li key={item.id}>{item.title}</li>
      ))}
    </ul>
  );
}

export default DataFetching;
